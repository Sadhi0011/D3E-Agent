(Model WeeklyTimeSheet {
    name 'WeeklyTimeSheet'
    master #Company
    package 'rewa.hr.2'
    properties [
        (employee {
            name 'Employee'
            type ({
                model #Employee
            })
        })
        (attachment {
            name 'Attachment'
            type ({
                primitive DFile
            })
        })
        (day1 {
            name 'Day1'
            type ({
                model #DayTimeSheet
            })
            child true
        })
        (day2 {
            name 'Day2'
            type ({
                model #DayTimeSheet
            })
            child true
        })
        (day3 {
            name 'Day3'
            type ({
                model #DayTimeSheet
            })
            child true
        })
        (day4 {
            name 'Day4'
            type ({
                model #DayTimeSheet
            })
            child true
        })
        (day5 {
            name 'Day5'
            type ({
                model #DayTimeSheet
            })
            child true
        })
        (day6 {
            name 'Day6'
            type ({
                model #DayTimeSheet
            })
            child true
        })
        (day7 {
            name 'Day7'
            type ({
                model #DayTimeSheet
            })
            child true
        })
        (period {
            name 'Period'
            type ({
                model #TimesheetPeriod
            })
            required true
        })
        (projectName {
            name 'ProjectName'
            type ({
                primitive String
            })
        })
        (activityName {
            name 'ActivityName'
            type ({
                primitive String
            })
        })
        (status {
            name 'Status'
            type ({
                optionSet #WeeklyTimesheetStatus
            })
        })
        (duration {
            name 'Duration'
            type ({
                primitive Duration
            })
        })
        (isBasicSheet {
            name 'IsBasicSheet'
            type ({
                primitive Boolean
            })
        })
        (payHours {
            name 'PayHours'
            collection true
            type ({
                model #PayCodeHour
            })
            child true
        })
        (actions {
            name 'Actions'
            collection true
            type ({
                model #WeeklyTimesheetAction
            })
            inverse true
            inverseProperty #timesheet
        })
    ]
    actions [
        (CreatePayHours {
            name 'CreatePayHours'
            block ```
                if (employee?.job?.payPolicy != null) {
                    DateUtil.recordPayCodeHoursData(this);
                }
            ```
        })
        (RecordPayHoursOnUpdate {
            runOn OnUpdate
            block ```
                if ((employee?.job?.payPolicy != null) && (employee?.job?.location?.country != null)) {
                    payHours = [];
                    DateUtil.recordPayCodeHoursData(this);
                    /*
                    till now employee does not have any paycodes now we are adding pay codes
                    if(employee?.job?.payPolicy != null){

                    }
                    List<WorkWeek> workWeeks = Database.getWorkWeeksInCountry(
                        country: employee.job.location.country
                    );
                    if (workWeeks.length == 1) {
                        WorkWeek ww = workWeeks.first;
                        Map<DayTimeSheet, Map<EmployeeActivity, Double>> perSheet = Map();
                        for (DayTimeSheet sheet in TimeSheetHelper.getDayTimesheets(old)) {
                            // Find EmployeeActivities that have changed
                            // 1. Present in old but not in new
                            // 2. Present in new but not in old
                            // 3. Present in both with Duration different
                    
                            if (!perSheet.containsKey(sheet)) {
                                perSheet.set(sheet, Map());
                            }
                            Map<EmployeeActivity, Double> hrs = perSheet.get(sheet);
                            for (EmployeeActivity ea in sheet.projectActivity) {
                                if (!hrs.containsKey(ea)) {
                                    hrs.set(ea, 0.0);
                                }
                                hrs.set(ea, hrs.get(ea) + ea.duration.inMinutes / 60.0);
                            }
                        }
                    
                        for (DayTimeSheet sheet in TimeSheetHelper.getDayTimesheets(this)) {
                            if (!perSheet.containsKey(sheet)) {
                                // New sheet
                                Duration totalWorked = sheet.projectActivity.fold(Duration(), (d, s) => d.plus(s.duration));
                                DateUtil.recordPayCodeHours(sheet, payHours, totalWorked, ww);
                                continue;
                            }
                            Map<EmployeeActivity, Double> hrs = perSheet.remove(sheet);
                            for (EmployeeActivity ea in sheet.projectActivity) {
                                if (!hrs.containsKey(ea)) {
                                    // New EmployeeActivity
                                    DateUtil.recordPayCodeHours(sheet, payHours, ea.duration, ww);
                                    continue;
                                }
                                Double oldHrs = hrs.remove(ea);
                                Double newHrs = ea.duration.inMinutes / 60.0;
                                if (oldHrs != newHrs) {
                                    // Hours is updated
                                    PayPolicyRuleType dc = DateUtil.getDayCycle(sheet.day, ww);
                                    List<PayCodeHour> hours = payHours.where(t => t.rule.type == dc);
                    
                                    PayCodeHour until = hours.firstWhere(t => !t.rule.after);
                                    List<PayCodeHour> after = hours.where(t => t.rule.after).toList().orderBy((t) => t.rule.hours);
                    
                                    // Subtract old value and add new value.
                                    DateUtil.addOrSubtractHours(until, after, oldHrs, subtract: true);
                                    DateUtil.addOrSubtractHours(until, after, newHrs);
                                }
                            }
                        }
                    }
                    */
                }
            ```
        })
    ]
    needCreatedDate true
    needUpdatedDate true
})