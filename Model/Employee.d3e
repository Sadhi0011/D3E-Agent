(Model Employee {
    name 'Employee'
    master #Company
    package 'rewa.hr.2'
    enableCustomFields true
    enableDynamicReports true
    allowDynamicReport true
    properties [
        (firstName {
            name 'First Name'
            type ({
                primitive String
            })
            required true
        })
        (middleName {
            name 'Middle Name'
            type ({
                primitive String
            })
        })
        (lastName {
            name 'Last Name'
            type ({
                primitive String
            })
            required true
        })
        (employeeId {
            name 'Employee  Id'
            type ({
                primitive String
            })
            required true
            unique true
        })
        (location {
            name 'Location'
            type ({
                model #Location
            })
            required true
            referenceFrom `company.locations`
        })
        (photograph {
            name 'Photograph'
            type ({
                model #D3EImage
            })
        })
        (email {
            name 'Email'
            type ({
                primitive String
            })
            existsIf `createLoginDetails`
            required true
            validations [
                ({
                    errorMsg 'Invalid email'
                    expression `FieldValidation.isEmail(it)`
                })
            ]
        })
        (passPortNumber {
            type ({
                primitive String
            })
        })
        (panNumber {
            type ({
                primitive String
            })
        })
        (status {
            name 'Status'
            type ({
                primitive Boolean
            })
            defaultValue `true`
        })
        (password {
            name 'Password'
            type ({
                primitive String
            })
            existsIf `createLoginDetails`
            required true
        })
        (eSSRole {
            name 'ESS Role'
            type ({
                model #UserRole
            })
            referenceFrom `company.userRoles.where(r => r.type == ESS)`
        })
        (supervisorRole {
            name 'Supervisor Role'
            type ({
                model #UserRole
            })
            referenceFrom `company.userRoles.where(r => r.type == Supervisor)`
        })
        (adminRole {
            name 'Admin Role'
            type ({
                model #UserRole
            })
            referenceFrom `company.userRoles.where(r => r.type == Admin)`
        })
        (contactDetails {
            name 'ContactDetails'
            type ({
                model #EmployeeContactDetails
            })
            inverse true
            inverseProperty #employee
        })
        (workweek {
            name 'Workweek'
            type ({
                model #EmployeeWorkWeek
            })
            inverse true
            inverseProperty #employee
        })
        (socialMediaDetails {
            name 'SocialMediaDetails'
            collection true
            type ({
                model #EmployeeSocialMedia
            })
            inverse true
            inverseProperty #employee
        })
        (emergencyContacts {
            name 'EmergencyContacts'
            collection true
            type ({
                model #EmployeeEmergencyContact
            })
            needAllChildren false
            inverse true
            inverseProperty #employee
        })
        (dependents {
            name 'Dependents'
            collection true
            type ({
                model #EmployeeDependent
            })
            inverse true
            inverseProperty #employee
        })
        (immigrations {
            name 'Immigrations'
            collection true
            type ({
                model #EmployeeImmigration
            })
            inverse true
            inverseProperty #employee
        })
        (supervisors {
            name 'Supervisors'
            collection true
            type ({
                model #EmployeeReportTo
            })
            inverse true
            inverseProperty #employee
        })
        (subordinates {
            name 'Subordinates'
            collection true
            type ({
                model #EmployeeReportTo
            })
            inverse true
            inverseProperty #reportsTo
        })
        (educations {
            name 'Educations'
            collection true
            type ({
                model #EmployeeEducation
            })
            inverse true
            inverseProperty #employee
        })
        (skills {
            name 'Skills'
            collection true
            type ({
                model #EmployeeSkill
            })
            inverse true
            inverseProperty #employee
        })
        (workExperience {
            name 'Work Experience'
            collection true
            type ({
                model #EmployeeWorkExperience
            })
            inverse true
            inverseProperty #employee
        })
        (languages {
            name 'Languages'
            collection true
            type ({
                model #EmployeeLanguage
            })
            inverse true
            inverseProperty #employee
        })
        (licenses {
            name 'licenses'
            collection true
            type ({
                model #EmployeeLicense
            })
            inverse true
            inverseProperty #employee
        })
        (memberships {
            name 'Memberships'
            collection true
            type ({
                model #EmployeeMembership
            })
            inverse true
            inverseProperty #employee
        })
        (deposits {
            name 'Deposits'
            collection true
            type ({
                model #EmployeeDirectDeposit
            })
            onDelete DeleteThis
            inverse true
            inverseProperty #employee
        })
        (salary {
            name 'Salary'
            type ({
                model #EmployeeSalary
            })
            inverse true
            inverseProperty #employee
        })
        (salaryHistory {
            name 'Salary History'
            collection true
            type ({
                model #EmployeeSalaryHistory
            })
            inverse true
            inverseProperty #employee
        })
        (taxExemption {
            name 'Tax Exemption'
            type ({
                model #EmployeeTaxExemptions
            })
            inverse true
            inverseProperty #employee
        })
        (subUnit {
            name 'SubUnit'
            type ({
                model #SubUnit
            })
        })
        (job {
            name 'Job'
            type ({
                model #EmployeeJob
            })
            inverse true
            inverseProperty #employee
        })
        (jobTitle {
            name 'JobTitle'
            type ({
                model #JobTitle
            })
            computed true
            computation `job != null ? job.jobTitle : null`
        })
        (createLoginDetails {
            name 'Create Login Details'
            type ({
                primitive Boolean
            })
        })
        (phoneNumber {
            name 'PhoneNumber'
            type ({
                primitive String
            })
            validations [
                ({
                    errorMsg 'Allows numbers and only + - / ( )'
                    expression `PhoneNumberUtil.isValidNumber(it)`
                })
            ]
        })
        (name {
            name 'Name'
            type ({
                primitive String
            })
            computed true
            computation `[firstName, middleName, lastName].where(n => n != null).join(' ')`
            readType ReadOnly
        })
        (code {
            name 'Code'
            type ({
                primitive Integer
            })
        })
        (nickName {
            name 'Nick Name'
            type ({
                primitive String
            })
        })
        (dateOfBirth {
            name 'Date of Birth'
            type ({
                primitive Date
            })
        })
        (gender {
            name 'Gender'
            type ({
                optionSet #Gender
            })
        })
        (maritalStatus {
            name 'Marital Status'
            type ({
                optionSet #MaterialStatus
            })
        })
        (nationality {
            name 'Nationality'
            type ({
                model #Nationality
            })
        })
        (driverLicenseNumber {
            name 'Driver License Number'
            type ({
                primitive String
            })
        })
        (licenseExpiryDate {
            name 'License Expiry Date'
            type ({
                primitive Date
            })
        })
        (socialSecurityNo {
            name 'Social Security No'
            type ({
                primitive Integer
            })
        })
        (immigrationStatus {
            name 'Immigration Status'
            type ({
                model #ImmigrationStatus
            })
        })
        (citizenship {
            name 'Citizenship'
            type ({
                primitive String
            })
        })
        (countryOfBirth {
            name 'Country of Birth'
            type ({
                primitive String
            })
        })
        (smoker {
            name 'Smoker'
            type ({
                primitive Boolean
            })
        })
        (eEORaceAndEthniciity {
            name 'EEO Race and Ethniciity'
            type ({
                primitive String
            })
        })
        (empCode {
            name 'Emp Code'
            type ({
                primitive String
            })
        })
        (hiringManager {
            name 'HiringManager'
            type ({
                primitive Boolean
            })
            description 'Used to mark that this user is a hiring manager'
        })
        (contracts {
            name 'Contracts'
            collection true
            type ({
                model #EmploymentContract
            })
            inverse true
            inverseProperty #employee
        })
        (attachments{
            type ({
                model #Attachment
            })
            collection true
            inverse true
            inverseProperty #employee
        })
        (dependentAttachments{
            type ({
                model #Attachment
            })
            collection true
            inverse true
            inverseProperty #dependentEmployee
        })
        (emergencyAttachments{
            type ({
                model #Attachment
            })
            collection true
            inverse true
            inverseProperty #emergencyEmployee
        })
        (contactAttachments{
            type ({
                model #Attachment
            })
            collection true
            inverse true
            inverseProperty #contactEmployee
        })
        (immigrationAttachments{
            type ({
                model #Attachment
            })
            collection true
            inverse true
            inverseProperty #immigrationEmployee
        })
        (membershipAttachments{
            type ({
                model #Attachment
            })
            collection true
            inverse true
            inverseProperty #membershipEmployee
        })
        (qualificationAttachments{
            type ({
                model #Attachment
            })
            collection true
            inverse true
            inverseProperty #qualificationEmployee
        })
        (reportToAttachments{
            type ({
                model #Attachment
            })
            collection true
            inverse true
            inverseProperty #reportToEmployee
        })
        (bradfordFactor{
            name 'Bradford Factor'
            type ({
                model #EmployeeBradfordFactor
            })           
            inverse true
            inverseProperty #employee
        })
        (bankAccounts {
            name 'Bank Accounts'
            collection true
            type ({
                model #EmployeeBankAccount
            })
            inverse true
            inverseProperty #employee
        })
        (sentEmail {
            name 'Sent Email'
            type ({
                primitive Boolean
            })
            description 'Used to mark that this user has sent an email'
        })
        (employeeJobHistory {
            type ({
                model #EmployeeJobHistory
            })
        })
        (nationalityName {
            type ({
                primitive String
            })
        })
        (uanNumber {
            type ({
                primitive String
            })
        })
        (wishedCount {
            type ({
                primitive Integer
            })
        })
    ]
    display `this.name + ' (' + employeeId + ')'`
    actions [
        (AddEndUser {
            name 'addEndUser'
            block ```
                if (createLoginDetails) {
                    EndUser user = EndUser(
                        shortcuts: [],
                        username: firstName + ' ' + lastName,
                        newPassword: password,
                        employee: this,
                        email: email.toLowerCase(),
                        eSSRole : eSSRole,
                        supervisorRole : supervisorRole,
                        adminRole : adminRole,
                        emailVerified : true,
                        status: status,
                        name: firstName + ' ' + lastName,
                        company : this.company,
                    );
                    Database.save(user);
                }
                if(this.sentEmail){
                    Services.getEmailService().send(EmailMessage(to : [this.email],html : true, body : 'It&rsquo;s great to have you on board, and I&rsquo;m certain you&rsquo;ll gain a lot of new experience in this role.<br> \n'+
                    'You may begin using our company&rsquo;s HRMS portal by visiting this link <br> \n '+ '<a href="'+ Env.get().baseHttpUrl +'/">'+ Env.get().baseHttpUrl +'</a> <br> \n ' + 'UserEmail : ' + this.email + '<br>\n' + 'Password : ' + this.password + '<br>\n' + 
                    'Should you have any questions, don&rsquo;t hesitate to contact me or a fellow employee for help!<br> \n All the best,<br> \n  Team HR<br> \n' + company.name, subject : 'Welcome to the '+ company.name));
                }
                EmployeeUtil.createJobHistory(this);
            ```
        })
        (SaveAuditRecordOnCreate {
            runOn OnCreate
            name 'SaveAuditRecordOnCreate'
            block ```
                String details = [
                    if (name != null)
                        'Name: ' + name,
                    if (location != null)
                        'Location: ' + location.name
                ].join(', ');
                
                EmployeeUtil.addAuditRecord(
                    company: company,
                    action: 'ADD EMPLOYEE DETAILS -I',
                    employee: this,
                    section: 'Employee',
                    actionDescription: 'New Employee was added (' + details + ')',
                );
                
                EmployeeUtil.addPersonalDetailsAuditRecordOnCreate(this);
                
                EmployeeUtil.addSalaryAuditRecordOnCreate(this);
                
                // Tax exemption
                
                // COVID-19
                
                // Custom fields changed: For each populated field in CustomFields, add one row
                location.noOfEmployees = location.noOfEmployees + 1;
            ```
        })
        (SaveAuditRecordOnUpdate {
            runOn OnUpdate
            name 'SaveAuditRecordOnUpdate'
            block ```
                Employee old = this.old;
                
                // Personal details changed
                EmployeeUtil.addPersonalDetailsAuditRecordOnUpdate(old, this);
                
                // Job details added/changed in EmployeeJob
                
                // Salary details added/changed
                EmployeeUtil.addSalaryAuditRecordOnUpdate(old, this);
                
                // Tax exemption
                // COVID-19
                // TODO: These could be Custom Fields
                
                
                // Custom fields changed: For each populated field in CustomFields, add one row

                if( location != null && old != null && old.location != null && old.location != location) {
                    old.location.noOfEmployees = old.location.noOfEmployees - 1;
                    location.noOfEmployees = location.noOfEmployees + 1;
                }
            ```
        })
        (DeleteAuditRecordOnDelete {
            runOn OnDelete
            block ```
                EmployeeUtil.addAuditRecord(
                    company: company,
                    action: 'DELETE EMPLOYEE DETAILS',
                    employee: this,
                    section: 'Employee',
                    actionDescription: [
                        name,
                        employeeId
                    ].join('\n'),
                );
            ```
        })
    ]
})