Model {
    package 'rewa.hr.2'
    name 'Leave Request'
    allowDynamicReport true
    needCreatedDate true
    needUpdatedDate true
    master Employee
    properties [
        {
            name 'Leave Type'
            type LeaveType
        }
        {
            name 'From Date'
            type Date
        }
        {
            name 'Net Leave Balance Days'
            type Double
        }
        {
            name 'To Date'
            type Date
        }
        {
            name 'Comments'
            collection true
            type LeaveRequestComment
            inverse true
            inverseProperty leaveRequest
        }
        {
            name 'Number Of Days'
            type Double
        }
        {
            name 'Status'
            type LeaveStatus
        }
        {
            name 'Partial Days'
            type PartialDays
            existsIf `this.fromDate != this.toDate`
        }
        {
            name 'Start Duration'
            type LeaveDuration
        }
        {
            name 'End Duration'
            type LeaveDuration
        }
        {
            name 'All Duration'
            type LeaveDuration
            existsIf `this.fromDate == this.toDate`
        }
        {
            name 'Start Morning Half'
            type Boolean
            existsIf `this.allDuration == HalfDay`
        }
        {
            name 'End Morning Half'
            type Boolean
            existsIf `this.allDuration == HalfDay`
        }
        {
            name 'All Morning Half'
            type Boolean
            existsIf `this.allDuration == FullDay`
        }
        {
            name 'Start Partial From'
            type Time
        }
        {
            name 'Start Partial To'
            type Time
        }
        {
            name 'End Partial From'
            type Time
        }
        {
            name 'End Partial To'
            type Time
        }
        {
            name 'All Partial From'
            type Time
        }
        {
            name 'All Partial To'
            type Time
        }
        {
            name 'Start Partial Duration'
            type Duration
        }
        {
            name 'End Partial Duration'
            type Duration
        }
        {
            name 'Leave Days'
            collection true
            type LeaveDay
            child true
        }
        {
            name 'Attachment'
            type Attachment
            inverse true
            inverseProperty leaveRequest
        }
        {
            name 'Nominees'
            collection true
            type Employee
        }
        {
            name 'Applied On'
            type Date
        }
        {
            name 'InitalComment'
            type String
        }
    ]
    display `this.leaveType.name`
    actions [
        {
            name 'CalculateAffectedDays'
            block ```
                Company company = employee.company;
                Double hoursPerDay;
                WorkShift shift = employee?.job?.workShift ?? null;
                if (shift == null) {
                    // TODO: Always 9 hours?
                    hoursPerDay = 9.0;
                } else {
                    hoursPerDay = shift.hoursPerDay.inHours.toDouble();
                }
                this.leaveDays = LeaveUtils.createLeaveDays(company, this, hoursPerDay);
                Double leaveHours = 0.0;
                for(LeaveDay day in leaveDays) {
                    leaveHours = leaveHours + day.hours;
                }
                this.numberOfDays = leaveHours / hoursPerDay;
            ```
        }
        {
            name 'Store Initial Comment'
            block ```
                if(initalComment != null && initalComment.isNotEmpty ) {
                    LeaveRequestComment lrc = LeaveRequestComment(
                        commentedBy: employee,
                        comment: initalComment ,
                        createdDate: Date.now(),
                        leaveRequest: this
                    );
                    Database.save(lrc);
                }
            ```
        }
        {
            name 'SendEmailToNominee'
            block ```
                if(this.nominees.isNotEmpty){

                    EndUser user = CurrentUser.get() as EndUser;
                
                    Map<String, String> map = Map.fromIterables([
                        'leaveRequestOwner',
                        'performerName',
                        'body'
                    ], [
                        employee.name,
                        user.employee?.name??'Admin',
                        '<BODY>'
                    ]);
                    
                    for (Employee nominee in this.nominees) {
                        map.remove('affectedEmployeeName');
                    
                        map.set('affectedEmployeeName', nominee.name);
                    
                        EmailContext repl = EmailContext(map);
                    
                        // Send
                        NotificationHelper.sendActionBasedEmails(
                            NomineeAdded,
                            repl,
                            employee,
                            All,
                            All,
                        );
                    }
                }
            ```
        }
        {
            name 'SendEmailOnLeaveRequestCreate'
            block ```
                // Leave Applications
                // Leave Assignments                
                EmailContext repl = EmailContext(Map.fromIterables([
                    'performerFullName',
                    'numberOfDays',
                    'leaveType',
                    'leaveDetails',
                    'additionalLeaveDetails',
                    'additionalLeaveCancelDetails',
                    'nomineeDetails',
                ], [
                    employee.name,
                    numberOfDays.toString(),
                    leaveType.toString(),
                    '<Leave Details>',
                    '<Additional Leave Details>',
                    '<Additional Leave Cancel Details>',
                    '<Nominee Details>'
                ]));
                
                NotificationHelper.sendActionBasedEmails(
                    LeaveApplications,
                    repl,
                    employee,
                    All,
                    EmailNotificationUtil.getLeaveState(this.status),
                );
                
                NotificationHelper.sendActionBasedEmails(
                    LeaveAssignments,
                    repl,
                    employee,
                    All,
                    EmailNotificationUtil.getLeaveState(this.status),
                );
            ```
        }
        {
            runOn OnUpdate
            name 'SendEmailOnLeaveRequestUpdate'
            block ```
                // Leave Approvals
                // Leave Cancellations
                // Leave Rejections
                
                EmailContext repl = EmailContext(Map.fromIterables([
                    'performerFullName',
                    'numberOfDays',
                    'leaveType',
                    'leaveDetails',
                    'additionalLeaveDetails',
                    'additionalLeaveCancelDetails',
                    'nomineeDetails',
                ], [
                    employee.name,
                    numberOfDays.toString(),
                    leaveType.toString(),
                    '<Leave Details>',
                    '<Additional Leave Details>',
                    '<Additional Leave Cancel Details>',
                    '<Nominee Details>'
                ]));
                
                NotificationHelper.sendActionBasedEmails(
                    LeaveApplications,
                    repl,
                    employee,
                    EmailNotificationUtil.getLeaveState(old.status),
                    EmailNotificationUtil.getLeaveState(this.status),
                );
                
                NotificationHelper.sendActionBasedEmails(
                    LeaveAssignments,
                    repl,
                    employee,
                    EmailNotificationUtil.getLeaveState(old.status),
                    EmailNotificationUtil.getLeaveState(this.status),
                );
            ```
        }
        {
            runOn OnUpdate
            name 'CheckNominees'
            block ```
                List<Employee> oldNominees = old.nominees;
                List<Employee> newNominees = nominees;
                
                EndUser user = CurrentUser.get() as EndUser;
                
                Map<String, String> map = Map.fromIterables([
                    'leaveRequestOwner',
                    'performerName',
                    'body'
                ], [
                    employee.name,
                    user.employee?.name??'Admin',
                    '<BODY>'
                ]);
                
                List<Employee> emps = [];
                if (oldNominees.length > newNominees.length) {
                    // Nominee removed
                    emps = oldNominees.sublist(newNominees.length);
                } else if (oldNominees.length < newNominees.length) {
                    // Nominee added
                    emps = newNominees.sublist(oldNominees.length);
                }
                
                for (Employee nominee in emps) {
                    map.remove('affectedEmployeeName');
                
                    map.set('affectedEmployeeName', nominee.name);
                
                    EmailContext repl = EmailContext(map);
                
                    // Send
                    NotificationHelper.sendActionBasedEmails(
                        NomineeAdded,
                        repl,
                        employee,
                        All,
                        All,
                    );
                }
            ```
        }
        {
            runOn OnUpdate
            name 'UpdateBradfordFactor'
            block ```
                if (status == Approved || status == Cancelled) {
                    LeaveUtils.updateBradfordFactor(this, old);
                }
            ```
        }
        {
            runOn OnUpdate
            name 'Update Attendance Sheet'
            block ```
                if (this.status == Approved) {
                    Double totalHours = this.leaveDays.fold(0.0, (hrs, ld) => hrs + ld.hours);
                    if (totalHours > 0.0) {
                        // 1. Get AttendanceSheet for this Employee
                        // 1.1. Look for latest PunchInAndOut of this employee
                        // 1.2. If one exists, then it will have an AttendanceSheet object
                        // 1.3. If not, then create AttendanceSheet and save it.
                        // 2. Update AttendanceSheet's leave hours
                    
                        AttendanceSheet sheet = null;
                        PunchInAndOut last = HRService.getLastPunchInOut(employee);
                        if (last != null) {
                            sheet = last.sheet;
                        }
                        if (sheet == null) {
                            // We only want to create the attendance sheet, not populate it with any PunchInAndOut objects
                            // The sheet will be saved in the method
                            sheet = AttendanceSheetUtil.createAttendanceSheetForEmployee(employee);
                        }
                        // Update the sheet
                        AttendanceLeaveTime leaveTime = sheet.leaveTimes.firstWhere(lt => lt.leaveType == leaveType);
                        if (leaveTime == null) {
                            // Create a zero duration leave time and add it to the object
                            leaveTime = AttendanceLeaveTime(
                                leaveType: leaveType,
                                duration: Duration()
                            );
                        }
                    
                        // Calculate hours, mins parts from totalHours
                        // This precision should be enough.
                        Integer hrsPart = totalHours.floor();
                        Double leftOver = totalHours - hrsPart;
                        Integer minsPart = 0;
                        if (leftOver > 0.0) {
                            // leftOver is a fraction of an hour.
                            // convert it to minutes.
                            leftOver = leftOver * 60;
                            minsPart = leftOver.floor();
                            leftOver = leftOver - minsPart;
                        }
                    
                        // Update the leave time duration
                        leaveTime.duration = leaveTime.duration.plus(Duration(
                            hours: hrsPart,
                            minutes: minsPart
                        ));
                    
                        // Save the sheet
                        Database.save(sheet);
                    }
                }
            ```
        }
        {
            runOn OnUpdate
            name 'Leave Bradford Factor Report'
            block ```
                if(this.leaveType.includedInBradfactorReport) {
                    LeaveUtils.updateBradfordFactor(this, old);
                }
                LeaveUtils.updateLeaveEntitlements(this, old);
            ```
        }
        {
            runOn OnUpdate
            name 'onChangeLeavePayroll'
            block ```
                LeaveUtils.updateLeavePayroll(this);
                List<LeaveDay> leaveDays = this.leaveDays;
                Integer length = this.leaveDays.length;
                // Approve 
                List<LeaveDay> approved = leaveDays.where((ld) => ld.status == Approved).toList();
                if(approved.length == length) {
                    this.status = Approved;
                }
                // Cancel
                List<LeaveDay> cancelled = leaveDays.where((ld) => ld.status == Cancelled).toList();
                if(cancelled.length == length) {
                    this.status = Cancelled;
                }
                // Reject
                List<LeaveDay> rejected = leaveDays.where((ld) => ld.status == Rejected).toList();
                if(rejected.length == length) {
                    this.status = Rejected;
                }
            ```
        }
    ]
}