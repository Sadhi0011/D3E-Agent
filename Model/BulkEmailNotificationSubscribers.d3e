(Model BulkEmailNotificationSubscribers {
    name 'Bulk Email Notification Subscribers'
    
    package 'rewa.hr.2'
    properties [
        (emailNotification{
            type ({
                model #EmailNotification
            })
            required true
        })
        (employees {
            name 'Employees'
            collection true
            type ({
                model #Employee
            })
            needAllChildren false
        })
        (adminUserRoles {
            name 'Admin User Roles'
            collection true
            type ({
                model #UserRole
            })
        })
        (supervisorRoles {
            name 'Supervisor Roles'
            collection true
            type ({
                model #UserRole
            })
        })
        (essRoles {
            name 'Ess Roles'
            collection true
            type ({
                model #UserRole
            })
        })
        (subscriberEmails{
            name 'SubscriberEmails'
            collection true
            type ({
                model #SubscriberEmail
            })
            child true
        })
        (needExcludeEmployees {
            name 'Need Exclude Employees'
            type ({
                primitive Boolean
            })
            
        })
        (includeInCC {
            name 'Include In CC'
            type ({
                primitive Boolean
            })
            booleanLabels Custom
            customTrueValue 'CC'
            customFalseValue 'TO'
        })
        (workflowActionScenarios {
            name 'Workflow Action Scenarios'
            collection true
            type ({
                model #WorkflowActionScenario
            })
            child true
        })
        (type {
            name 'Type'
            type ({
                optionSet #EmailNotificationSubscriberType
            })
        })
        (excludeEmployees {
            name 'Exclude Employees'
            collection true
            type ({
                model #Employee
            })
        })
        (immediateSupervisorsOnly {
            name 'Immediate Supervisors Only'
            type ({
                primitive Boolean
            })
            booleanLabels Custom
            customTrueValue 'Entire Supervisor Chain'
            customFalseValue 'Immediate Supervisor Only'
        })
        (whenToNotify {
            name 'When To Notify'
            type ({
                optionSet #EmailNotificationTime
            })
        })
        (template {
            name 'Template'
            type ({
                model #EmailTemplate
            })
        })
        (schedule {
            name 'Schedule'
            type ({
                optionSet #EmailSchedule
            })
        })
        (affectedEmployee {
            name 'Affected Employee'
            type ({
               model #Employee
            })
        })
        (notifyEmployee {
            name 'Notify Employee'
            type ({
                primitive Boolean
            })
        })
    ]
    transient true
    actions [
        (onCreate{
            runOn OnCreate
            block ```
                List<EmailNotificationSubscriber> all = [];
                List<UserRole> allRoles = [
                    ...adminUserRoles,
                    ...supervisorRoles,
                    ...essRoles
                ];
                for(UserRole r in allRoles) {
                    all.add(
                        EmailNotificationSubscriber(
                            company: this.emailNotification.company,
                            emailNotification: emailNotification,
                            subscriber: r.name + ' (UserRole)',
                            role: r,
                            excludeEmployees: excludeEmployees,
                            includeInCC: includeInCC,
                            type: Role,
                        )
                    );
                }
                for(Employee e in employees) {
                    all.add(
                        EmailNotificationSubscriber(
                            company: this.emailNotification.company,
                            emailNotification: emailNotification,
                            subscriber: e.name,
                            employee: e,
                            includeInCC: includeInCC,
                            type: Employee,
                        )
                    );
                }
                for(SubscriberEmail se in subscriberEmails) {
                    all.add(
                        EmailNotificationSubscriber(
                            company: this.emailNotification.company,
                            emailNotification: emailNotification,
                            subscriber: se.name + ' <' +  se.email + '>',
                            toEmail: se.email,
                            toName: se.name,
                            includeInCC: includeInCC,
                            type: Email,
                        )
                    );
                }
                for(EmailNotificationSubscriber sub in all) {
                    sub.template = template;
                    sub.whenToNotify = whenToNotify;
                    sub.schedule = schedule;
                    sub.affectedEmployee = affectedEmployee;
                    sub.notifyEmployee = notifyEmployee;
                    for(WorkflowActionScenario s in workflowActionScenarios) {
                        sub.workflowActionScenarios.add(WorkflowActionScenario(
                            config: s.config,
                            role: s.role,
                            performedBy: s.performedBy,
                            notify: s.notify,
                            template: s.template,
                        ));
                    }
                }
                workflowActionScenarios = [];
                Database.saveAll(all);
            ```
        })
    ]
})