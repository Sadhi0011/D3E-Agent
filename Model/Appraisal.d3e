(Model Appraisal {
    name 'Appraisal'
    master #Employee
    allowDynamicReport true
    package 'rewa.hr.2'
    properties [
        (description {
            name 'Description'
            type ({
                primitive String
            })
            required true
        })
        (appraisalCycle {
            name 'Appraisal Cycle'
            type ({
                model #AppraisalCycle
            })
        })
        (appraisalTemplate {
            name 'Appraisal Template'
            type ({
                model #AppraisalTemplate
            })
            required true
        })
        (from {
            name 'From'
            type ({
                primitive Date
            })
            required true
        })
        (to {
            name 'To'
            type ({
                primitive Date
            })
            required true
        })
        (dueDate {
            name 'Due Date'
            type ({
                primitive Date
            })
            required true
        })
        (status {
            name 'Status'
            type ({
                optionSet #AppraisalStatus
            })
        })
        (evaluator {
            name 'Evaluator'
            type ({
                model #Employee
            })
        })
        (self {
            name 'Self'
            type ({
                primitive Boolean
            })
        })
        (supervisors {
            name 'Supervisors'
            collection true
            type ({
                model #Employee
            })
        })
        (peers {
            name 'Peers'
            collection true
            type ({
                model #Employee
            })
        })
        (subordinates {
            name 'Subordinates'
            collection true
            type ({
                model #Employee
            })
        })
        (reviewProgress{
            type ({
                primitive Double
            })
        })
        (finalrating{
            type ({
                primitive Double
            })
        })
    ]
    actions [
        (SendEmailOnAppraisalCreate {
            name 'SendEmailOnAppraisalCreate'
            block ```
                EmailContext ctx = EmailContext(Map.fromIterables([
                    'from_date',
                    'to_date',
                    'Employee_Name',
                ], [
                    from.toString(),
                    to.toString(),
                    employee.name
                ]));
                
                EmployeeAppraisalNotificationUtil.addSubscribers(ctx, EmployeeAppraisalInitiatedNotification, this);

                NotificationHelper.sendActionBasedEmails(
                    EmployeeAppraisalInitiatedNotification,
                    ctx,
                    employee,
                    NotInitiated,
                    EmailNotificationUtil.getAppraisalState(this.status),
                );
            ```
        })
        (SendEmailOnAppraisalUpdate {
            runOn OnUpdate
            name 'SendEmailOnAppraisalUpdate'
            block ```
                EmailContext ctx = EmailContext(Map.fromIterables([
                    'from_date',
                    'to_date',
                    'Employee_Name',
                ], [
                    from.toString(),
                    to.toString(),
                    employee.name
                ]));
                
                EmployeeAppraisalNotificationUtil.addSubscribers(ctx, EmployeeAppraisalInitiatedNotification, this);

                NotificationHelper.sendActionBasedEmails(
                    EmployeeAppraisalCompletedNotification,
                    ctx,
                    employee,
                    EmailNotificationUtil.getAppraisalState(old.status),
                    EmailNotificationUtil.getAppraisalState(this.status),
                );
                
                // Since addReceiver just calls set on a Map, we can use it to add a replacer in the same context
                // The old one will just be replaced.
                EmployeeAppraisalNotificationUtil.addReplacerForSubscriber(ctx, EmployeeAppraisalSubmittedNotification);
                NotificationHelper.sendActionBasedEmails(
                    EmployeeAppraisalSubmittedNotification,
                    ctx,
                    employee,
                    EmailNotificationUtil.getAppraisalState(old.status),
                    EmailNotificationUtil.getAppraisalState(this.status),
                );
                
                // Since addReceiver just calls set on a Map, we can use it to add a replacer in the same context
                // The old one will just be replaced.
                EmployeeAppraisalNotificationUtil.addReplacerForSubscriber(ctx, EmployeeAppraisalRejectedNotification);
                NotificationHelper.sendActionBasedEmails(
                    EmployeeAppraisalRejectedNotification,
                    ctx,
                    employee,
                    EmailNotificationUtil.getAppraisalState(old.status),
                    EmailNotificationUtil.getAppraisalState(this.status),
                );
            ```
        })
    ]
})