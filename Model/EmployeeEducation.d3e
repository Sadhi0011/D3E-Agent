(Model EmployeeEducation {
    name 'Employee Education'
    
    master #Employee
    enableCustomFields true
    package 'rewa.hr.2'
    properties [
        (year {
            name 'Year'
            type ({
                primitive String
            })
        })
        (startDate {
            name 'StartDate'
            type ({
                primitive Date
            })
        })
        (endDate {
            name 'EndDate'
            type ({
                primitive Date
            })
        })
        (specialization {
            name 'Specialization'
            type ({
                primitive String
            })
        })
        (gPAorScore {
            name 'GPAorScore'
            type ({
                primitive Double
            })
        })
        (institute {
            name 'Institute'
            type ({
                primitive String
            })
        })
        (level {
            name 'Level'
            type ({
                model #Education
            })
            required true
        })
    ]
    actions [
        (saveAuditRecordOnCreate {
            runOn OnCreate
            block ```
                List<String> changes = [
                    EmployeeUtil.getChangedStringForNewField('Year', year),
                    EmployeeUtil.getChangedStringForNewField('Start Date', startDate),
                    EmployeeUtil.getChangedStringForNewField('End Date', endDate),
                    EmployeeUtil.getChangedStringForNewField('Specialization', specialization),
                    EmployeeUtil.getChangedStringForNewField('GPA or Score', gPAorScore),
                    EmployeeUtil.getChangedStringForNewField('Insititute', institute),
                    EmployeeUtil.getChangedStringForNewField('Level', level.name),
                ].where((x) => x != null);

                if (changes.isNotEmpty) {
                    EmployeeUtil.addAuditRecord(
                        company: employee.company,
                        action: 'ADD EDUCATION DETAILS -I',
                        employee: employee,
                        section: 'Qualification',
                        actionDescription: changes.join('\n'),
                    );
                }
            ```
        })
        (saveAuditRecordOnUpdate {
            runOn OnUpdate
            block ```
                if (old == null) {
                    return;
                }

                List<String> changes = [
                    EmployeeUtil.getChangedFromString('Year', old.year, year),
                    EmployeeUtil.getChangedFromStringFromObjects('Start Date', old.startDate, startDate),
                    EmployeeUtil.getChangedFromStringFromObjects('End Date', old.endDate, endDate),
                    EmployeeUtil.getChangedFromString('Specialization', old.specialization, specialization),
                    EmployeeUtil.getChangedFromStringFromObjects('GPA or Score', old.gPAorScore, gPAorScore),
                    EmployeeUtil.getChangedFromString('Insititute', old.institute, institute),
                    EmployeeUtil.getChangedFromString('Level', old.level.name, level.name),
                ].where((x) => x != null);

                if (changes.isNotEmpty) {
                    EmployeeUtil.addAuditRecord(
                        company: employee.company,
                        action: 'UPDATE EDUCATION DETAILS -U',
                        employee: employee,
                        section: 'Qualification',
                        actionDescription: changes.join('\n'),
                    );
                }
            ```
        })
        (deleteAuditRecordOnDelete {
            runOn OnDelete
            block ```
                EmployeeUtil.addAuditRecord(
                    company: employee.company,
                    action: 'DELETE EDUCATION DETAILS',
                    employee: employee,
                    section: 'Qualification',
                    actionDescription: [
                        year,
                        startDate.toString(),
                        endDate.toString(),
                        specialization,
                        gPAorScore.toString(),
                        institute,
                        level.name
                    ].join('\n'),
                );
            ```
        })
    ]
})