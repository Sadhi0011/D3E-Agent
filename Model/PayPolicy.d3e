(Model PayPolicy {
    name 'Pay Policy'
    master #Company
    allowDynamicReport true
    package 'rewa.hr.2'
    properties [
        (name {
            name 'Name'
            type ({
                primitive String
            })
            required true
        })
        (payPeriod {
            name 'Pay Period'
            type ({
                optionSet #PayPeriod
            })
            required true
        })
        (startDate {
            name 'Start Date'
            type ({
                primitive Date
            })
            required true
        })
        (endDate {
            name 'EndDate'
            type ({
                primitive Date
            })
            existsIf `payPeriod == SemiMonthly`
            required true
        })
        (enableWorkDayRules {
            name 'Enable Work Day Rules'
            type ({
                primitive Boolean
            })
        })
        (rules {
            name 'Rules'
            collection true
            type ({
                model #PayPolicyRule
            })
            child true
        })
        (roundOfNearest {
            name 'Round Of Nearest'
            type ({
                primitive String
            })
            existsIf `this.roundOffAttendance`
            description 'In Minutes'
        })
        (roundOffAttendance {
            name 'Round Off Attendance'
            type ({
                primitive Boolean
            })
        })
        (roundOffToShiftTimes {
            name 'Round Off to Shift Times'
            type ({
                primitive String
            })
            existsIf `this.roundOffAttendance`
            description 'In Minutes'
        })
        (isRoundOfNearest {
            name 'Is Round Of Nearest'
            type ({
                primitive Boolean
            })
            defaultValue `false`
        })
        (jobTitles {
            name 'Job Titles'
            collection true
            type ({
                model #JobTitle
            })
        })
        (locations {
            name 'Locations'
            collection true
            type ({
                model #Location
            })
        })
        (subUnits {
            name 'SubUnits'
            collection true
            type ({
                model #SubUnit
            })
        })
        (employmentStatuses {
            name 'Employment Statuses'
            collection true
            type ({
                model #EmploymentStatus
            })
        })
        (lastPeriod {
            name 'Last Period'
            type ({
                model #PayPolicyPeriod
            })
            readType ReadOnly
        })
        (currentPeriod {
            name 'Current Period'
            type ({
                model #PayPolicyPeriod
            })
            readType ReadOnly
        })
    ]
    actions [
        (CreatePeriods {
            name 'CreatePeriods'
            block ```// All periods will be saved in the method
                PayPolicyUtil.createPayPolicyPeriodsUntilDate(this, Date.now(), createAll: true);
            ```
        })
        (UpdateEmployees {
            runOn OnUpdate
            block ```
                // If the object was successfully saved, then there are no clashes
                List<Employee> applicable = Database.getEmployeeSelectionList(
                    company: company,
                    ascending: false,
                    jobTitles: jobTitles,
                    employmentStatuses: employmentStatuses,
                    subUnits: subUnits,
                    locations: locations,
                    pageSize: 1000,
                    offset: 0,
                    orderBy : ''
                );

                // No clash, so no need for a null check
                //do bellow action in clinet side
                // List<Employee> changed = applicable.where((e) => e.job.payPolicy != this);
                // changed.forEach((e) => e.job.payPolicy = this);
                // List<EmployeeJob> jobs = changed.map(e => e.job).toList();
                // Database.saveAll(jobs);
            ```
        })
    ]
    display `this.name`
})
