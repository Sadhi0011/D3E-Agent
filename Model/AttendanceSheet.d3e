(Model AttendanceSheet {
    name 'Attendance Sheet'
    master #Employee
    allowDynamicReport true
    package 'rewa.hr.2'
    properties [
        (period {
            type ({
                model #PayPolicyPeriod
            })
            required true
        })
        (totalTime {
            name 'Total Time'
            type ({
                primitive Duration
            })
        })
        (leaveTimes{
            type ({
                model #AttendanceLeaveTime
            })
            collection true
            child true
        })
        (totalLeaveTime {
            name 'Total Leave Time'
            type ({
                primitive Duration
            })
        })
        (status {
            name 'Status'
            type ({
                optionSet #AttendanceSheetStatus
            })
        })
        (payCodeTimes {
            name 'Pay Code Times'
            collection true
            type ({
                model #PayCodeTime
            })
            child true
        })
        (employee {
            name 'Employee'
            type ({
                model #Employee
            })
        })
        (payPolicy {
            name 'Pay Policy'
            type ({
                model #PayPolicy
            })
            onDelete DeleteThis
        })
        (perDayRecords {
            type ({
                model #AttendancePerDayRecord
            })
            collection true
            child true
        })
        (actions{
            type ({
                model #AttendanceSheetAction
            })
            collection true
            inverse true
            inverseProperty #attendanceSheet
        })
    ]
    actions [
        (createPayCodeTimes {
            runOn OnCreate
            block ```
                // Create payCodeTimes according to the PayPolicy.
                // These will never be created again.
                if (payPolicy != null) {
                    // Assuming that payPolicy.rules does not have any incorrect data
                    payCodeTimes = payPolicy.rules.map((r) => PayCodeTime(
                        rule: r,
                        time: Duration()
                    )).toList();
                    if(period != payPolicy.currentPeriod){
                        payPolicy.lastPeriod = payPolicy.currentPeriod;
                    }
                    payPolicy.currentPeriod = period;
                    Database.save(payPolicy);
                }
            ```
        })
    ]
})