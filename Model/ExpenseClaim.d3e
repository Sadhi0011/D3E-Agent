(Model ExpenseClaim {
    name 'Expense Claim'
    master #Company
    package 'rewa.hr.2'
    properties [
        (basisOfClaim {
            name 'Basis Of Claim'
            type ({
                optionSet #ExpenseClaimBasis
            })
            required true
        })
        (claimID {
            name 'Claim ID'
            type ({
                primitive String
            })
        })
        (currency {
            name 'Currency'
            type ({
                model #Currency
            })
            required true
        })
        (submissionDate {
            name 'Submission Date'
            type ({
                primitive Date
            })
        })
        (details{
            name 'Details'
            type ({
                model #ExpenseDetails
            })
            child true
            collection true
        })
        (totalAmount {
            name 'Total Amount'
            type ({
                primitive Double
            })
        })
        (attachments {
            name 'Attachments'
            collection true
            type ({
                model #Attachment
            })
            inverse true
            inverseProperty #expenseClaim
        })
        (comment {
            name 'Comment'
            type ({
                primitive String
            })
        })
        (employee {
            name 'Employee'
            type ({
                model #Employee
            })
            required true
        })
        (claimStatus {
            name 'Claim Status'
            type ({
                optionSet #ExpenseClaimStatus
            })
        })
        (project{
            type ({
                model #Project
            })
            required true
            existsIf `basisOfClaim == Projects`
        })
        (travelRequest{
            type ({
                model #TravelRequest
            })
            required true
            existsIf `basisOfClaim == ApprovedTravelRequests`
        })
        (history {
            type ({
                model #ExpenseClaimHistory
            })
            collection true
            inverse true
            inverseProperty #expenseClaim
        })
    ]
    actions [
        (SendEmailsForClaimUpdate {
            runOn OnUpdate
            name 'SendEmailsForClaimUpdate'
            block ```
                EndUser user = CurrentUser.get() as EndUser;
                EmailContext repl = EmailContext(Map.fromIterables([
                    'employeeName',
                    'performerFullName'
                ], [
                    employee.name,
                    user.employee.name
                ]));
                
                NotificationHelper.sendActionBasedEmails(
                    PublishNewsNotification,
                    repl,
                    employee,
                    EmailNotificationUtil.getExpenseClaimState(old.claimStatus),
                    EmailNotificationUtil.getExpenseClaimState(this.claimStatus),
                );
                
                NotificationHelper.sendActionBasedEmails(
                    ClaimRequestAssignment,
                    repl,
                    employee,
                    EmailNotificationUtil.getExpenseClaimState(old.claimStatus),
                    EmailNotificationUtil.getExpenseClaimState(this.claimStatus),
                );
                
                NotificationHelper.sendActionBasedEmails(
                    ClaimRequestRejection,
                    repl,
                    employee,
                    EmailNotificationUtil.getExpenseClaimState(old.claimStatus),
                    EmailNotificationUtil.getExpenseClaimState(this.claimStatus),
                );
                
                NotificationHelper.sendActionBasedEmails(
                    ClaimRequestSubmission,
                    repl,employee,
                    EmailNotificationUtil.getExpenseClaimState(old.claimStatus),
                    EmailNotificationUtil.getExpenseClaimState(this.claimStatus),
                );
            ```
        })
    ]
})