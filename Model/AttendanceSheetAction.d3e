(Model AttendanceSheetAction {
    name 'Attendance Sheet Action'
    
    master #AttendanceSheet
    package 'rewa.hr.2'
    properties [
        (performedBy {
            name 'Performed By'
            type ({
                model #Employee
            })
            readType ReadOnly
        })
        (performedTime {
            name 'Performed Time'
            type ({
                primitive DateTime
            })
            readType ReadOnly
        })
        (action {
            name 'Action'
            type ({
                optionSet #AttendanceSheetStatus
            })
        })
    ]
    actions [
        (SendEmailOnApprove {
            name 'SendEmailOnApprove'
            runOn OnCreate
            block ```
                // Assumed that this model will never be updated

                // Create replacers
                Map<String, String> map = Map.fromIterables([
                    'performerFullName',
                    'EmployeeName',
                    'StartDate',
                    'EndDate',
                ], [
                    performedBy.name,
                    attendanceSheet.employee.name,
                    attendanceSheet.period.from.toString(),
                    attendanceSheet.period.to.toString()
                ]);
                EmailContext repl = EmailContext(map);
                
                // Send emails based on action
                Employee emp = attendanceSheet.employee;
                if (this.action == Approved) {
                    NotificationHelper.sendActionBasedEmails(
                        AttendanceSheetApproval,
                        repl,
                        emp,
                        EmailNotificationUtil.getAttendanceSheetState(attendanceSheet.status),
                        EmailNotificationUtil.getAttendanceSheetState(action),
                    );
                }
                
                if (this.action == Rejected) {
                    NotificationHelper.sendActionBasedEmails(
                        AttendanceSheetRejection,
                        repl,
                        emp,
                        EmailNotificationUtil.getAttendanceSheetState(attendanceSheet.status),
                        EmailNotificationUtil.getAttendanceSheetState(action),
                    );
                }
                
                if (this.action == Submitted) {
                    NotificationHelper.sendActionBasedEmails(
                        AttendanceSheetSubmission,
                        repl,
                        emp,
                        EmailNotificationUtil.getAttendanceSheetState(attendanceSheet.status),
                        EmailNotificationUtil.getAttendanceSheetState(action),
                    );
                }

                // Update status
                attendanceSheet.status = action;
                Database.save(attendanceSheet);
            ```
        })
    ]
})