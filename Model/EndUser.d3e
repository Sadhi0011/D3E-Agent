(Model EndUser {
    name 'End User'
    
    master #Company
    parent #BaseUser
    package 'rewa.hr.2'
    properties [
        (email {
            name 'Email'
            type ({
                primitive String
            })
            required true
            unique true
        })
        (employee {
            name 'Employee'
            type ({
                model #Employee
            })
        })
        (username {
            name 'Username'
            type ({
                primitive String
            })
            required true
            unique true
        })
        (supervisorRole {
            name 'Supervisor Role'
            type ({
                model #UserRole
            })
            referenceFrom `this.company.userRoles.where(r => r.type == Supervisor)`
        })
        (adminRole {
            name 'Admin Role'
            type ({
                model #UserRole
            })
            referenceFrom `this.company.userRoles.where(r => r.type == Admin)`
        })
        (status {
            name 'Status'
            type ({
                primitive Boolean
            })
            description 'Is this user\'s login enabled?'
        })
        (newPassword {
            type ({
                primitive String
            })
            transient true
        })
        (password {
            type ({
                primitive String
            })
            required true
            readType None
        })
        (regions {
            name 'Regions'
            type ({
                model #Location
            })
            collection true
        })
        (eSSRole {
            name 'ESS Role'
            type ({
                model #UserRole
            })
            referenceFrom `this.company.userRoles.where(r => r.type == ESS)`
        })
        (emailVerified {
            name 'Email Verified'
            type ({
                primitive Boolean
            })
        })
        (widgetSettings {
            name 'Widget Settings'
            type ({
                model #UserWidgetSettings
            })
        })
        (mostFeedbackDuring {
            name 'Most Feedback During'
            type ({
                optionSet #PerformanceFeedbackDuration
            })
        })
        (showSubOrdinatesLeavesOnly {
            name 'Show Sub Ordinates Leaves Only'
            type ({
                primitive Boolean
            })
        })
        (showInterviewsInMyActions {
            name 'Show Interviews In My Actions'
            type ({
                primitive Boolean
            })
        })
        (showTrainingsInMyActions {
            name 'Show Trainings In My Actions'
            type ({
                primitive Boolean
            })
        })
        (showOnboardingEventsAndTasksInMyActions {
            name 'Show Onboarding Events and Tasks In My Actions'
            type ({
                primitive Boolean
            })
        })
        (showPendingLeavesAsSummaryInMyActions {
            name 'Show Pending Leaves As Summary in My Actions'
            type ({
                primitive Boolean
            })
        })
        (showPendingTimesheetsAsSummaryInMyActions {
            name 'Show Pending Timesheets As Summary In My Actions'
            type ({
                primitive Boolean
            })
        })
        (showPendingAttendanceSheetsAsSummaryInMyActions {
            name 'Show Pending Attendance Sheets As Summary In My Actions'
            type ({
                primitive Boolean
            })
        })
        (showPendingAppraisalReviewsAsSummaryInMyActions {
            name 'Show Pending Appraisal Reviews As Summary In My Actions'
            type ({
                primitive Boolean
            })
        })
        (showPendingGoalsAsSummaryInMyActions {
            name 'Show Pending Goals As Summary In My Actions'
            type ({
                primitive Boolean
            })
        })
        (showSubOrdinatesGoalsOnly {
            name 'Show Sub Ordinates Goals Only'
            type ({
                primitive Boolean
            })
            existsIf `!showPendingGoalsAsSummaryInMyActions`
        })
        (approvePendingLeaves {
            name 'Approve Pending Leaves'
            type ({
                primitive Boolean
            })
        })
        (approvePendingTimesheets {
            name 'Approve Pending Timesheets'
            type ({
                primitive Boolean
            })
        })
        (approvePendingAttendanceSheets {
            name 'Approve Pending Attendance Sheets'
            type ({
                primitive Boolean
            })
        })
        (reviewPendingAppraisal {
            name 'Review Pending Appraisal'
            type ({
                primitive Boolean
            })
        })
        (approvePendingGoals {
            name 'Approve Pending Goals'
            type ({
                primitive Boolean
            })
        })
        (shortcuts {
            name 'Shortcuts'
            collection true
            type ({
                model #Shortcut
            })
            inverse true
            inverseProperty #endUser
        })
        (name {
            type ({
                primitive String
            })
        })
        (defaultEmployeeFilter {
            type ({
                model #EmployeeShortcut
            })
            child true
        })
        (defaultGoalFilter {
            type({
                model #GoalsShorcut
            })
            child true
        })
        (defaultAppraisalFilter{
            type({
                model #AppraisalShortcut
            })
            child true
        })
        (defaultLeaveCalendarFilter{
            type({
                model #LeaveShorcut
            })
            child true
        })
        (defaultTimeSheetShortCut {
            type ({
                model #TimeSheetShortCut
            })
            child true
        })
    ]
    display `this.username`
    actions [
        (CreateNewPassword {
            runOn OnCreateAndUpdate
            name 'Created Standard Test User'
            block ```
                if(newPassword != null && newPassword.isNotEmpty) {
                    this.password = newPassword;
                }
                if(this.employee.email != this.email){
                    this.employee.email = this.email;
                    Database.save(this.employee);
                }
            ```
        })
    ]
})