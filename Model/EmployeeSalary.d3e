(Model EmployeeSalary {
    name 'Employee Salary'
    master #Employee
    allowDynamicReport true
    package 'rewahr.com'
    enableCustomFields true
    properties [
        (costToCompany {
            name 'Cost To Company'
            type ({
                primitive Double
            })
            readType ReadOnly
            computed true
            computation `SalaryUtil.calculateCostToCompany(this)`
        })
        (totalPayable {
            name 'Total Payable'
            type ({
                primitive Double
            })
            readType ReadOnly
            computed true
            computation `SalaryUtil.calculateTotalPayable(this)`
        })
        (payGrade {
            name 'Pay Grade'
            type ({
                model #PayGrade
            })
        })
        (currency {
            name 'Currency'
            type ({
                model #Currency
            })
            referenceFrom `payGrade.currencies.map((c) => c.currency).toList()`
        })
        (minimum {
            name 'Minimum'
            type ({
                primitive Double
            })
            readType ReadOnly
            computed true
            computation `SalaryUtil.calculateMinimum(this)`
        })
        (maximum {
            name 'Maximum'
            type ({
                primitive Double
            })
            readType ReadOnly
            computed true
            computation `SalaryUtil.calculateMaximum(this)`
        })
        (comments {
            name 'Comments'
            type ({
                primitive String
            })
            longText true
        })
        (earnings {
            name 'Earnings'
            type ({
                model #EmployeeSalaryBreakup
            })
            child true
            collection true
        })
        (grossPay {
            name 'Gross Pay'
            type ({
                primitive Double
            })
            readType ReadOnly
            computed true
            computation `SalaryUtil.calculateGrossPay(this)`
        })
        (deductions {
            name 'Deductions'
            type ({
                model #EmployeeSalaryBreakup
            })
            child true
            collection true
        })
        (totalDeductions {
            name 'Total Deductions'
            type ({
                primitive Double
            })
            readType ReadOnly
            computed true
            computation `SalaryUtil.calculateTotalDeductions(this)`
        })
        (attachments{
            type ({
                model #Attachment
            })
            collection true
            inverse true
            inverseProperty #salary
        })
        (effectiveFrom{
            type ({
                primitive Date
            })
        })
    ]
    actions [
        (saveAuditRecordOnCreate {
            runOn OnCreate
            block ```
                List<String> changes = [
                    EmployeeUtil.getChangedStringForNewField('Cost To Company', costToCompany),
                    EmployeeUtil.getChangedStringForNewField('Total Payable', totalPayable),
                    EmployeeUtil.getChangedStringForNewField('Pay Grade', payGrade),
                    EmployeeUtil.getChangedStringForNewField('Currency', currency),
                    EmployeeUtil.getChangedStringForNewField('Minimum', minimum),
                    EmployeeUtil.getChangedStringForNewField('Maximum', maximum),
                    EmployeeUtil.getChangedStringForNewField('Comments', comments),
                    EmployeeUtil.getChangedStringForNewField('Gross Pay', grossPay),
                    EmployeeUtil.getChangedStringForNewField('Total Deductions', totalDeductions),
                    EmployeeUtil.getChangedStringForNewField('Effective From', effectiveFrom),
                ].where((x) => x != null);
                if(earnings.isNotEmpty) {
                    for(EmployeeSalaryBreakup earning in earnings) {
                        changes.add(EmployeeUtil.getChangedStringForNewField(earning.component.name + 'Earnings', earning.amount));
                    }
                }
                if(deductions.isNotEmpty) {
                    for(EmployeeSalaryBreakup deduction in deductions) {
                        changes.add(EmployeeUtil.getChangedStringForNewField(deduction.component.name + 'Deductions', deduction.amount));
                    }
                }
                if (changes.isNotEmpty) {
                    EmployeeUtil.addAuditRecord(
                        company: employee.company,
                        action: 'ADD SALARY DETAILS -I',
                        employee: employee,
                        section: 'Salary',
                        actionDescription: changes.join('\n'),
                    );
                }
            ```
        })
        (saveAuditRecordOnUpdate {
            runOn OnUpdate
            block ```
                if(old == null) {
                    return;
                }

                List<String> changes = [
                    EmployeeUtil.getChangedFromStringFromObjects('Cost To Company', old.costToCompany, costToCompany),
                    EmployeeUtil.getChangedFromStringFromObjects('Total Payable', old.totalPayable, totalPayable),
                    EmployeeUtil.getChangedFromStringFromObjects('Pay Grade', old.payGrade, payGrade),
                    EmployeeUtil.getChangedFromStringFromObjects('Currency', old.currency, currency),
                    EmployeeUtil.getChangedFromStringFromObjects('Minimum', old.minimum, minimum),
                    EmployeeUtil.getChangedFromStringFromObjects('Maximum', old.maximum, maximum),
                    EmployeeUtil.getChangedFromStringFromObjects('Comments', old.comments, comments),
                    EmployeeUtil.getChangedFromStringFromObjects('Gross Pay', old.grossPay, grossPay),
                    EmployeeUtil.getChangedFromStringFromObjects('Total Deductions', old.totalDeductions, totalDeductions),
                    EmployeeUtil.getChangedFromStringFromObjects('Effective From', old.effectiveFrom, effectiveFrom),
                ].where((x) => x != null);
                  if(earnings.isNotEmpty) {
                    for(EmployeeSalaryBreakup earning in old.earnings) {
                        EmployeeSalaryBreakup newEarning = earnings.firstWhere((e) => e.component == earning.component, orElse: () => null);
                        changes.add(EmployeeUtil.getChangedFromStringFromObjects('Earnings', earning.amount, newEarning != null ? newEarning.amount : 0.0));
                    }
                }
                if(deductions.isNotEmpty) {
                    for(EmployeeSalaryBreakup deduction in old.deductions) {
                        EmployeeSalaryBreakup newDeduction = deductions.firstWhere((e) => e.component == deduction.component, orElse: () => null);
                        changes.add(EmployeeUtil.getChangedFromStringFromObjects('Deductions',  deduction.amount,  newDeduction != null ? newDeduction.amount : 0.0));
                    }
                }
                changes = changes.where((x) => x != null);
                if (changes.isNotEmpty) {
                    EmployeeUtil.addAuditRecord(
                        company: employee.company,
                        action: 'UPDATE SALARY DETAILS -U',
                        employee: employee,
                        section: 'Salary',
                        actionDescription: changes.join('\n'),
                    );
                }
            ```
        })
        (deleteAuditRecordOnDelete {
            runOn OnDelete
            block ```
                EmployeeUtil.addAuditRecord(
                    company: employee.company,
                    action: 'DELETE SALARY DETAILS',
                    employee: employee,
                    section: 'Qualification',
                    actionDescription: [
                        costToCompany,
                        totalPayable,
                        payGrade,
                        comments,
                        currency,
                        minimum,
                        maximum,
                        comments,
                        earnings,
                        grossPay,
                        deductions,
                        totalDeductions,
                        effectiveFrom,
                    ].join('\n')
                );
            ```
        })
    ]
})