(Model TravelRequest {
    name 'Travel Request'
    master #Company
    package 'rewa.hr.2'
    properties [
        (currency {
            name 'Currency'
            type ({
                model #Currency
            })
            required true
        })
        (employee {
            name 'Employee'
            type ({
                model #Employee
            })
            required true
        })
        (requestID {
            name 'Request ID'
            type ({
                primitive String
            })
        })
        (submittedDate {
            name 'Submitted Date'
            type ({
                primitive Date
            })
        })
        (status {
            name 'Status'
            type ({
                optionSet #TravelRequestStatus
            })
        })
        (informations {
            name 'Informations'
            collection true
            type ({
                model #TravelInformation
            })
            child true
        })
        (estimates {
            name 'Estimates'
            collection true
            type ({
                model #TravelRequestEstimate
            })
            child true
        })
        (purpose {
            name 'Purpose'
            type ({
                primitive String
            })
        })
        (sumOfEstimates {
            name 'Sum of Estimates'
            type ({
                primitive Double
            })
            computed true
            computation `EmployeeHistoryUtils.getTotalEstimate(this.estimates)`
        })
        (applyForCashAdvance {
            name 'Apply For Cash Advance'
            type ({
                primitive Boolean
            })
        })
        (cashAdvanceAmount {
            name 'Cash Advance Amount'
            type ({
                primitive Double
            })
        })
        (comment {
            name 'Comment'
            type ({
                primitive String
            })
        })
        (attachments {
            name 'Attachments'
            collection true
            type ({
                model #Attachment
            })
            inverse true
            inverseProperty #travelRequest
        })
        (history {
            type ({
                model #TravelRequestHistory
            })
            collection true
            inverse true
            inverseProperty #travelRequest
        })
    ]
    display `this.requestID`
    actions [
        (SendEmailOnTravelRequestUpdate {
            runOn OnUpdate
            name 'SendEmailOnTravelRequestUpdate'
            block ```
                EndUser user = CurrentUser.get() as EndUser;
                EmailContext repl = EmailContext(Map.fromIterables([
                    'employeeName',
                    'performerFullName',
                    'VacancyCurrentState',
                    'CurrentDate',
                    'InitialState'
                ], [
                    employee.name,
                    user.employee.name,
                    status.name,
                    Date.now().toString(),
                    old.status.name
                ]));
                
                NotificationHelper.sendActionBasedEmails(
                    TravelRequestApproval,
                    repl,
                    employee,
                    EmailNotificationUtil.getTravelRequestState(old.status),
                    EmailNotificationUtil.getTravelRequestState(this.status),
                );
                
                NotificationHelper.sendActionBasedEmails(
                    TravelRequestAssignment,
                    repl,
                    employee,
                    EmailNotificationUtil.getTravelRequestState(old.status),
                    EmailNotificationUtil.getTravelRequestState(this.status),
                );
                
                NotificationHelper.sendActionBasedEmails(
                    TravelRequestCancellation,
                    repl,
                    employee,
                    EmailNotificationUtil.getTravelRequestState(old.status),
                    EmailNotificationUtil.getTravelRequestState(this.status),
                );
                
                NotificationHelper.sendActionBasedEmails(
                    TravelRequestRejection,
                    repl,
                    employee,
                    EmailNotificationUtil.getTravelRequestState(old.status),
                    EmailNotificationUtil.getTravelRequestState(this.status),
                );
                
                NotificationHelper.sendActionBasedEmails(
                    TravelRequestSubmission,
                    repl,
                    employee,
                    EmailNotificationUtil.getTravelRequestState(old.status),
                    EmailNotificationUtil.getTravelRequestState(this.status),
                );
            ```
        })
        (CreateTravelRequestHistory {
            name 'CreateTravelRequestHistory'
            runOn OnCreate
            block ```
                EndUser user = CurrentUser.get() as EndUser;
                Integer listCount = CompanyUtil.getTravelRequestCount(company);
                if(this.employee.supervisors.isNotEmpty){
                    status = TravelRequestStatus.PendingSupervisorApproval;
                }else {
                    status = TravelRequestStatus.PendingFinalApproval;
                }
                requestID = submittedDate.year.toString() + submittedDate.month.toString() + 'TVR' + (100 + listCount + 1).toString();
                TravelRequestHistory obj = TravelRequestHistory(
                    action : 'Travel request created',
                    performedBy : user,
                    comment : '',
                    travelRequest: this
                );
                Database.save(obj);
                Database.save(this);
            ```
        })
        (OnUpdate {
            runOn OnUpdate
            block ```
                EndUser user = CurrentUser.get() as EndUser;
                TravelRequestHistory obj = TravelRequestHistory(
                    action : 'Estimate Updated',
                    performedBy : user,
                    comment : '',
                    travelRequest: this
                );
                Database.save(obj);
            ```
        })
    ]
})
