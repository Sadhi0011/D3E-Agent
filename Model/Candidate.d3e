(Model Candidate {
    name 'Candidate'
    
    master #Company
    package 'rewa.hr.2'
    properties [
        (vacancy {
            name 'Vacancy'
            type ({
                model #Vacancy
            })
        })
        (firstName {
            name 'First Name'
            type ({
                primitive String
            })
            required true
        })
        (middleName {
            name 'Middle Name'
            type ({
                primitive String
            })
        })
        (lastName {
            name 'Last Name'
            type ({
                primitive String
            })
            required true
        })
        (name {
            name 'Name'
            type ({
                primitive String
            })
            computed true
            computation `firstName ?? '' + middleName ?? '' + lastName?? ''`
            readType ReadOnly
        })
        (email {
            name 'Email'
            type ({
                primitive String
            })
            required true
        })
        (contactNumber {
            name 'Contact Number'
            type ({
                primitive String
            })
            validations [
                ({
                    expression `RegExp(r'(\+?([ ()-+]|[0-9])+)$').hasMatch(it)`
                    errorMsg 'Allows numbers and only + - / ( )'
                })
            ]
        })
        (linkedIn {
            name 'Linked In'
            type ({
                primitive String
            })
        })
        (twitter {
            name 'Twitter'
            type ({
                primitive String
            })
        })
        (facebook {
            name 'Facebook'
            type ({
                primitive String
            })
        })
        (keywords {
            name 'Keywords'
            type ({
                primitive String
            })
            longText true
        })
        (notes {
            name 'Notes'
            type ({
                primitive String
            })
            longText true
        })
        (answers {
            name 'Answers'
            collection true
            type ({
                model #JobApplicationAnswer
            })
            needAllChildren false
        })
        (stage {
            name 'Stage'
            type ({
                model #VacancyWorkflowStage
            })
        })
        (stageResults {
            name 'Stage Results'
            collection true
            type ({
                primitive String
            })
        })
        (createdDate {
            name 'Created Date'
            type ({
                primitive Date
            })
        })
        (resume {
            name 'Resume'
            type ({
                primitive DFile
            })
            required true
        })
        (rejected {
            name 'Rejected'
            type ({
                primitive Boolean
            })
        })
        (archived {
            name 'Archived'
            type ({
                primitive Boolean
            })
        })
        (profilePhoto {
            name 'ProfilePhoto'
            type ({
                model #D3EImage
            })
            child true
        })
        (progress {
            name 'Progress'
            type ({
                model #VacancyWorkflowProgress
            })
        })
    ]
    display `this.name`
    actions [
        (UpdateNumberOfApplicants {
            name 'UpdateNumberOfApplicants'
            block ```if (vacancy != null) {
                    vacancy.numberOfApplicants += 1;
                    Database.save(vacancy);
                }
            ```
        })
        (UpdateShortlistedAndHired {
            runOn OnUpdate
            name 'UpdateShortlistedAndHired'
            block ```if (vacancy != null) {
                    WorkflowStagePosition position = null;
                    WorkflowStagePosition oldPosition = null;
                    if (progress != null) {
                        position = progress.stage.position;
                    }
                    if (old != null && old.progress != null) {
                        oldPosition = old.progress.stage.position;
                    }
                    if (oldPosition != position) {
                        // Position was changed in this Update
                        if (position == Shortlisted) {
                            vacancy.numberOfShortlisted += 1;
                            Database.save(vacancy);
                        }
                        if (position == Hired) {
                            vacancy.numberOfHired += 1;
                            Database.save(vacancy);
                        }
                    }
                }
            ```
        })
    ]
})