(Model EmployeeImmigration {
    name 'Employee Immigration'
    
    master #Employee
    enableCustomFields true
    package 'rewahr.com'
    properties [
        (document {
            name 'Document'
            type ({
                optionSet #DocumentType
            })
            required true
        })
        (issuedDate {
            name 'Issued Date'
            type ({
                primitive Date
            })
        })
        (expiryDate {
            name 'Expiry Date'
            type ({
                primitive Date
            })
        })
        (comments {
            name 'Comments'
            type ({
                primitive String
            })
            longText true
        })
        (number {
            name 'Number'
            type ({
                primitive String
            })
            validations [
                ({
                    expression `number.length < 30`
                    errorMsg 'number should not exceeds 30 characters'
                })
            ]
            required true
        })
        (issuedBy {
            name 'Issued By'
            type ({
                primitive String
            })
        })
        (eligibleReviewDate {
            name 'Eligible Review Date'
            type ({
                primitive Date
            })
        })
        (eligibleStatus {
            name 'Eligible Status'
            type ({
                primitive String
            })
        })
        (description {
            name 'Description'
            type ({
                primitive String
            })
            longText true
        })
    ]
    readType None
    actions [
        (saveAuditRecordOnCreate {
            runOn OnCreate
            block ```
                List<String> changes = [
                    EmployeeUtil.getChangedStringForNewField('Name', document.name),
                    EmployeeUtil.getChangedStringForNewField('Issued Date', issuedDate),
                    EmployeeUtil.getChangedStringForNewField('Expiry Date', expiryDate),
                    EmployeeUtil.getChangedStringForNewField('Comments', comments),
                    EmployeeUtil.getChangedStringForNewField('Number', number),
                    EmployeeUtil.getChangedStringForNewField('Issued By', issuedBy),
                    EmployeeUtil.getChangedStringForNewField('Eligible Review Date', eligibleReviewDate),
                    EmployeeUtil.getChangedStringForNewField('Eligible Status', eligibleStatus),
                    EmployeeUtil.getChangedStringForNewField('Description', description),
                ].where((x) => x != null);

                if (changes.isNotEmpty) {
                    EmployeeUtil.addAuditRecord(
                        company: employee.company,
                        action: 'ADD IMMIGRATION DETAILS -I',
                        employee: employee,
                        section: 'Immigration',
                        actionDescription: changes.join('\n'),
                    );
                }
            ```
        })
        (saveAuditRecordOnUpdate {
            runOn OnUpdate
            block ```
                if (old == null) {
                    return;
                }

                List<String> changes = [
                    EmployeeUtil.getChangedFromString('Name', old.document == null ? '' : old.document.name, document == null ? '' : document.name),
                    EmployeeUtil.getChangedFromStringFromObjects('Issued Date', old.issuedDate, issuedDate),
                    EmployeeUtil.getChangedFromStringFromObjects('Expiry Date', old.expiryDate, expiryDate),
                    EmployeeUtil.getChangedFromString('Comments', old.comments, comments),
                    EmployeeUtil.getChangedFromString('Number', old.number, number),
                    EmployeeUtil.getChangedFromString('Issued By', old.issuedBy, issuedBy),
                    EmployeeUtil.getChangedFromStringFromObjects('Eligible Review Date', old.eligibleReviewDate, eligibleReviewDate),
                    EmployeeUtil.getChangedFromString('Eligible Status', old.eligibleStatus, eligibleStatus),
                    EmployeeUtil.getChangedFromString('Description', old.description, description)
                ].where((x) => x != null);

                if (changes.isNotEmpty) {
                    EmployeeUtil.addAuditRecord(
                        company: employee.company,
                        action: 'UPDATE IMMIGRATION DETAILS -U',
                        employee: employee,
                        section: 'Immigration',
                        actionDescription: changes.join('\n'),
                    );
                }
            ```
        })
        (deleteAuditRecordOnDelete {
            runOn OnDelete
            block ```
                EmployeeUtil.addAuditRecord(
                    company: employee.company,
                    action: 'DELETE IMMIGRATION DETAILS',
                    employee: employee,
                    section: 'Immigration',
                    actionDescription: [
                        document.name,
                        issuedDate,
                        expiryDate,
                        comments,
                        number,
                        issuedBy,
                        eligibleReviewDate,
                        eligibleStatus,
                        description
                    ].join('\n')
                );
            ```
        })
    ]
})